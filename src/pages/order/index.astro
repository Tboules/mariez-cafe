---
import { getFirestore } from "firebase-admin/firestore";
import { app } from "../../firebase/server";
import Layout from "../../layouts/Layout.astro";
import {
  ORDER_OPTIONS_MILK,
  ORDER_OPTIONS_REFRESHER,
  ORDER_OPTIONS_TYPE,
  type MenuItem,
ORDER_OPTIONS_SWEETNESS,
} from "../../types";
import { ORDER_OPTIONS_TOPPINGS } from "../../types";

const drinkId = Astro.url.searchParams.get("drinkId");
if (!drinkId) {
  console.log("no drink id");
  return Astro.redirect("/");
}

const db = getFirestore(app);
const drinkRef = await db.collection("menuItems").doc(drinkId).get();

const drink = (await drinkRef.data()) as MenuItem | undefined;
if(drink) {
  drink.id = drinkRef.id
}


if (!drink) {
  return Astro.redirect("/");
}


---
<order-form data-message={JSON.stringify(drink)}>
  <Layout title="Order Page">
    <main class="wrapper">
      <h1>{drink.name}</h1>
      {drink.drinkTypes == "Hot" && <h4>*Hot Drink</h4>}
      {drink.drinkTypes == "Iced" && <h4>*Iced Drink</h4>}

      <form id="order-form">
        <div class="form-input">
          <label>Ordered By:</label>
          <input type="text" name="orderedBy" placeholder="Your Name" />
        </div>
        {
          drink.drinkTypes == "Either" && (
            <div class="form-input">
              <label>Drink Type:</label>
              <select name="orderOptionsType">
                {Object.values(ORDER_OPTIONS_TYPE).map((type) => (
                  <option value={type}>{type}</option>
                ))}
              </select>
            </div>
          )
        }

        {
          drink.milk && (
            <div class="form-input">
              <label>Milk:</label>
              <select name="orderOptionsMilk">
                {Object.values(ORDER_OPTIONS_MILK).map((milkType) => (
                  <option value={milkType}>{milkType}</option>
                ))}
              </select>
            </div>
          )
        }

        {
          drink.isRefresher && (
            <div class="form-input">
              <label>Base:</label>
              <select name="orderOptionsRefresher">
                {Object.values(ORDER_OPTIONS_REFRESHER).map((base) => (
                  <option value={base}>{base}</option>
                ))}
              </select>
            </div>
          )
        }

        {
          !drink.isRefresher && (
              <div class="form-input">
              <label>Sweetness:</label>
              <select name="orderOptionsSweetness">
                {
                  Object.values(ORDER_OPTIONS_SWEETNESS).map((sweetnessLevel) => (
                    <option value={sweetnessLevel}>{sweetnessLevel}</option>
                  ))
                }
              </select>
            </div>
          )
        }

        {
          !drink.isTea && (
            <div class="form-input">
            <label>Toppings:</label>
            <select name="orderOptionsToppings">
              {
                Object.values(ORDER_OPTIONS_TOPPINGS).map((toppings) => (
                  <option value={toppings}>{toppings}</option>
                ))
              }
            </select>
          </div>
          )
        }
        <button class="button" type="submit">Submit</button>
      </form>
    </main>
  </Layout>

</order-form>

<script>
  import type { MenuItem, Order, OrderOptionsType, OrderOptionsMilk, OrderOptionsRefresher, OrderOptionsToppings, OrderOptionsSweetness } from "../../types";
  import { clientDb } from "../../firebase/client";
  import { collection, addDoc } from "firebase/firestore";


  class OrderForm extends HTMLElement {
    constructor() {
      super();
      const orderForm = document.getElementById('order-form') as HTMLFormElement;
      const drink = JSON.parse(this.dataset.message ?? '') as MenuItem;

      orderForm?.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(orderForm)

        const orderedBy = formData.get('orderedBy') as string
        
        if(orderedBy == ''){
          alert('Name must be filled out')
          return;
        }


        const type = formData.get('orderOptionsType') as OrderOptionsType | null;
        const milk = formData.get('orderOptionsMilk') as OrderOptionsMilk | null;
        const refresherType = formData.get('orderOptionsRefresher') as OrderOptionsRefresher | null;
        const sweetness = formData.get('orderOptionsSweetness') as OrderOptionsSweetness | null;
        const toppings = formData.get('orderOptionsToppings') as OrderOptionsToppings | null;

        const order:Order = {
          orderItemId: drink.id,
          orderItemName: drink.name,
          orderedBy,
          status: 'ordered',
          createdAt: new Date(Date.now()),
          orderOptions: {
            type,
            milk,
            refresherType,
            sweetness,
            toppings
          }
        }


        const docRef = await addDoc(collection(clientDb, 'orders'), order);

        
        window.location.replace(`/thankyou?orderId=${docRef.id}`)
      })

    }
  }

  customElements.define('order-form', OrderForm);
</script>


<style>
  .wrapper {
    margin: 0 auto;
    max-width: 900px;
    padding: 1rem;
    space
  }
  .form-input {
    display: flex;
    flex-direction: column;
    gap: .5rem;
    margin: .75rem 0;
  }

  .button {
    margin-top: 10px;
    background: #5b3720;
    border-radius: 10px;
    color: #d9bea9;
    width: 100%;
<<<<<<< HEAD
    padding: 0.25em 0.25em;
    margin: 10px;
  }

  select, input {
    background: #fdeee2;
    /* background: #000; */
    color:  #5b3720;
    border-radius: 0.25em;
    width: 100%;
    padding: 0.25em 0.5em;
    margin: 10px;
    
    /* width: 100%;
    min-width: 15ch;
    max-width: 30ch;
    border: 1px solid var(--select-border);
    border-radius: 0.25em;
    padding: 0.25em 0.5em;
    font-size: 1.25rem;
    cursor: pointer;
    line-height: 1.1;
    background-color: #fff;
    background-image: linear-gradient(to top, #f9f9f9, #fff 33%); */

  }

=======
    padding: .5rem;
  }

  
>>>>>>> main

</style>
